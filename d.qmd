# D  {#sec-d}


```{r, message=FALSE, warning=FALSE,echo=FALSE}
library(tidyverse)
library(drone)
library(patchwork)
library(ggpattern)
data("worldbankdata")
```




## geom_density {#density}

**Package**

ggplot2 [@ggplot2]

**Description**

Computes and draws kernel density estimation.

**Understandable aesthetics**


*required aesthetics*

`x`, `y`

*optional aesthetics*

`alpha`, `colour`, `fill`, `group`, `linetype`, `linewidth`, `weight`


**See also**

[geom_histogram](#hist)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
worldbankdata |>
  ggplot(aes(x = Electricity)) +   geom_density()

```

## geom_density_line {#density_line}

**Package**

ggridges [@ggridges]

**Description**

Draws a density plot same as geom_density. The difference is that the geom draws a ridgeline (line with filled area underneath).

**Understandable aesthetics**


*required aesthetics*

`x`

`y`

*optional aesthetics*

`alpha`, `colour`, `fill`, `group`, `linetype`, `linewidth`, `weight`



**See also**

[geom_density](#density)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggridges)
worldbankdata |>
  ggplot(aes(x = Electricity)) +   
  geom_density_line()
```



## geom_density_2d {#density_2d}

**Package**

ggplot2 [@ggplot2]

**Description**

Computes a 2D kernel density estimation using `MASS::kde2d()` and display the results with contours. 

**Understandable aesthetics**

`stat_density`


*required aesthetics*

`x`

`y`

*optional aesthetics*

`alpha`, `colour`, `group`, `linetype`, `linewidth`



**See also**

[geom_histofram](#hist)

**Example**

```{r, warning=FALSE, message=FALSE}
a1 <- worldbankdata |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_density_2d() +
  xlim(0, 100) +
  ylim(0, 100) +
  theme(aspect.ratio = 1) + 
  labs(title = "a1: geom_density_2d only")
a2 <- worldbankdata |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_point() +
  geom_density_2d() +
  theme(aspect.ratio = 1) + 
  labs(title = "a2: geom_point and \n geom_density_2d") 
  
a1|a2
```


## geom_density_2d_filled {#density_2d_filled}

**Package**

ggplot2 [@ggplot2]

**Description**

Computes a 2D kernel density estimation using `MASS::kde2d()` and display the results with filled contour bands. 

**Understandable aesthetics**


*required aesthetics*

`x`

`y`

*optional aesthetics*

`alpha`, `colour`, `group`, `linetype`, `linewidth`, `subgroup`


**See also**

[geom_histogram](#hist)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=15}
a1 <- worldbankdata |>
  filter(Year == "2021") |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_density_2d_filled() + 
  labs(title = "a1: geom_density_2d_filled only") + 
  theme( aspect.ratio = 1)
a2 <- worldbankdata |>
  filter(Year == "2020") |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_density_2d_filled(alpha = 0.5) + 
    geom_point() + 
  labs(title = "a2: geom_point and \n geom_density_2d_filled") + 
  theme( aspect.ratio = 1)
a3 <- worldbankdata |>
  filter(Year == "2020") |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_point(alpha=0.5) + 
  labs(title = "a3: geom_point") + 
  theme(aspect.ratio = 1)
a1 / a2 / a3
```

## geom_density_ridges{#density_ridges}

**Package**

ggridges [@ggridges]

**Description**

Arranges multiple density plots in a staggered fashion.

**Understandable aesthetics**


*required aesthetics*

`x`, `y`

*optional aesthetics*

`colour`, `fill`, `group`, `height`, `alpha`, `linetype`, `linewidth`, `scale`, `rel_min_height`




**See also**

[geom_density_ridges_gradient](#density_ridges_gradient)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggridges)
 worldbankdata |>
  ggplot(aes(y = Income, x=Electricity)) +   
  geom_density_ridges() 
```

## geom_density_ridges_gradient{#density_ridges_gradient}

**Package**

ggridges [@ggridges]

**Description**

Arranges multiple density plots in a staggered fashion.

**Understandable aesthetics**


*required aesthetics*

`x`, `y`

*optional aesthetics*

`colour`, `fill`, `group`, `height`, `alpha`, `linetype`, `linewidth`, `scale`, `rel_min_height`



**See also**

[geom_density_ridges](#density_ridges)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggridges)
 worldbankdata |>
  ggplot(aes(y = Income, x=Electricity, fill=stat(x))) +   
  geom_density_ridges_gradient() +
  scale_fill_viridis_c()
```


## geom_dl{#dl}


**Package**

directlabels [@directlabels]

**Description**

Display direct labels on the plot.

**Understandable aesthetics**

`layer`


**See also**

[geom_text](#text)

**Example**


```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(directlabels)
a1 <- worldbankdata |>
  ggplot(aes(y = Cooking, x=Electricity)) +   
  geom_point(aes(col=Income)) +
  theme(aspect.ratio = 1) +
  scale_color_brewer(palette = "Set1")
a1 +
  geom_dl(aes(label=Income), method="smart.grid")+
  scale_shape_manual(values=c(H = 1, 
                              UM = 6,
                              L = 3,
                              LM = 2),
                     guide="none")

```


## geom_dotplot {#dotplot}

**Package**

ggplot2 [@ggplot2]

**Description**

Create dotplot.

### Understandable aesthetics


*required aesthetics*

`x` or `y`

*optional aesthetics*

`alpha`, `colour`, `fill` , `group`, `linetype`, `stroke`

**See also**

[geom_histogram](#hist)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
worldbankdata |>
  ggplot(aes(x=Cooking)) +   
  geom_dotplot(binwidth = 1) + 
  theme(legend.position="none", aspect.ratio = 1)
```

## geom_delaunay_tile {#delaunay_tile}

**Package**

ggforce [@ggforce]

**Description**

Display voronoi tesselation and delaunay triangulation.

**Understandable aesthetics**


*required aesthetics*

`x` or `y`

*optional aesthetics*

`alpha`, `colour`, `fill` , `linetype`, `size`



**See also**

[geom_delaunay_segment](#delaunay_segment)

**Example**

```{r, warning=FALSE, message=FALSE}
library(ggforce)
library(deldir) #to calculate delaunay triangulation
a1 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_delaunay_tile(alpha=0.5) + 
  labs(title = "a1: geom_delaunay_tile only") +
  theme(aspect.ratio = 1)

a2 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_point() +
  geom_delaunay_tile(alpha=0.5) + 
  labs(title = "a2: geom_point and \n geom_delaunay_tile") +
  theme(aspect.ratio = 1)
a1 | a2
```

## geom_delaunay_segment {#delaunay_segment}

**Package**

ggforce [@ggforce]

**Description**

Display voronoi tesselation and delaunay triangulation.

**Understandable aesthetics**


*required aesthetics*

`x` or `y`

*optional aesthetics*

`alpha`, `colour`, `fill` , `linetype`, `size`



**See also**

[geom_delaunay_tile](#delaunay_tile)

**Example**

```{r, warning=FALSE, message=FALSE}
library(ggforce)
library(deldir) #to calculate delaunay triangulation

a1 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_delaunay_segment() + 
  theme(aspect.ratio = 1) +
  labs(title = "a1: geom_delaunay_segment only") 

a2 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_point() +
  geom_delaunay_segment() + 
  theme(aspect.ratio = 1) +
  labs(title = "a2: geom_point and \n geom_delaunay_segment") 

a1 | a2
```

## geom_delaunay_segment2 {#delaunay_segment2}

**Package**

ggforce [@ggforce]

**Description**

Display voronoi tesselation and delaunay triangulation.

**Understandable aesthetics**


*required aesthetics*

`x` or `y`

*optional aesthetics*

`alpha`, `colour`, `fill` , `linetype`, `size`


**See also**

[geom_delaunay_tile](#delaunay_tile)

**Example**

```{r, warning=FALSE, message=FALSE}
library(ggforce)
library(deldir) #to calculate delaunay triangulation

a1 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_delaunay_segment2() + 
  theme(aspect.ratio = 1) +
  labs(title = "a1: geom_delaunay_segment2 only") 

a2 <- worldbankdata |>
  filter(Income == "L") |>
  ggplot(aes(x=Cooking, y=Electricity)) +   
  geom_point() +
  geom_delaunay_segment2() + 
  theme(aspect.ratio = 1) +
  labs(title = "a2: geom_point and \n geom_delaunay_segment2") 

a1 | a2
```

## geom_dumbbell

**Package**

ggalt[@ggalt]

**Description**

Create dumbbell charts.

**Understandable aesthetics**

*required aesthetics*

`x`, `y`, `xend`, `yend`


*optional aesthetics*


`alpha`, `colour`, `group`, `linetype`, `size`

**See also**

[geom_segment](#segment)

**Example**

```{r, warning=FALSE, message=FALSE}
library(ggalt)
df <- worldbankdata |>
  group_by(Income) |>
  summarise(min = min(Electricity, na.rm=TRUE), max = max(Electricity, na.rm=TRUE))
df
ggplot(df, aes(y=Income, x=min, xend=max)) +
  xlab("Electricity Range") + 
  geom_dumbbell(color = "darkgray",  # Color of the line between min and max
                size = 3,            # Line width
                dot_guide = FALSE,   # Whether to add a guide from origin to X or not
                size_x = 3,          # Size of the X point
                size_xend = 3,       # Size of the X end point
                colour_x = "#762a83",    # Color of the X point
                colour_xend = "#1b7837")   # Color of the X end point 
```
