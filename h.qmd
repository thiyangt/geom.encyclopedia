# H  {#sec-h}

```{r, echo=FALSE,warning=FALSE,message=FALSE}
library(tidyverse)
library(drone)
library(patchwork)
library(ggpattern)
data("worldbankdata")
```

## geom_hline{#hline}


**Package**

ggplot2 [@ggplot2]

**Description**

Draw a horizontal line ($Y=c$) for a given value of $c$, which is known as `yintercept`.

**Understandable aesthetics**

Unlike most other geoms, `geom_hline` does not depend on the x and y variables that we map for the main plot. `geom_hline` has its own independent characteristics: `yintercept`.   The yintercept can be passed either as a arguments or aesthetic.


**See also**

[geom_point](#point), [geom_vline](#vline), [geom_hline](#hline)

**Example**


```{r hline2, fig.cap="Illustration of (A) geom_hline and (B) use of geom_point and geom_hline both", warning=FALSE,message=FALSE}
a1 <- ggplot(worldbankdata, aes(y = Cooking, x= Electricity)) + geom_hline(yintercept = 50) + 
  labs(title="a1: `geom_hline` only") +
  theme(aspect.ratio = 1)

a2 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_point() + 
  geom_hline(yintercept = 50) + 
  labs(title="a2: `geom_point +\n geom_hline` both") +
  theme(aspect.ratio = 1)
a1 | a2
```


## geom_histogram{#histogram}


**Package**

ggplot2 [@ggplot2]

**Description**

Visualise  data using histogram.

**Understandable aesthetics**

Unlike most other geoms, `geom_hline` does not depend on the x and y variables that we map for the main plot. `geom_hline` has its own independent characteristics: `yintercept`.   The yintercept can be passed either as a arguments or aesthetic.


**See also**

[geom_density](#density), [geom_density_line](#density_line), [geom_freqpoly](#freqpoly)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
worldbankdata |>
  filter(Income == "LM") |>
  ggplot(aes(x = Electricity)) +   
  geom_histogram(col="white")

```



## geom_histogram_pattern{#histogram_pattern}


**Package**

ggplot2 [@ggplot2]

**Description**

Visualize numeric data using histogram and filled with patterns.

**Understandable aesthetics**

*required aesthetics*

`x` or `y`


*optional aesthetics*

`alpha`, `colour`, `group`, `linetype`, `linewidth`



**See also**

[geom_histogram](#histogram), [geom_density](#density), [geom_density_line](#density_line)

### Example

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
worldbankdata |>
  filter(Income == "LM") |>
  ggplot(aes(x = Electricity)) +   
  geom_histogram_pattern( pattern_color = "white",
                   pattern_fill = "black")
```

## geom_hdr_boxplot

**Package**

gghdr [@gghdr]

**Description**

Calculates and plots the box plot of highest density regions.

**Understandable aesthetics**

*required aesthetics*

`x` or `y`


*optional aesthetics*

`alpha`, `colour`



**See also**

[geom_boxplot](#boxplot), [geom_histogram](#histogram), [geom_density](#density), [geom_density_line](#density_line)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5, eval=FALSE}
library(gghdr)
worldbankdata |>
  dplyr::filter(Year == 2021) |>
  dplyr::select(Cooking) |>
ggplot(aes(y = Cooking, x=factor(0))) + 
  geom_hdr_boxplot(fill = "#081d58") 
```

## geom_hex{#hex}

**Package**

gghdr [@gghdr]

**Description**

Calculates and plots the box plot of highest density regions.

**Understandable aesthetics**

*required aesthetics*

`x` or `y`


*optional aesthetics*

`alpha`, `colour`, `fill`, `group`, `linetype`, `linewidth`



**See also**

[geom_boxplot](#boxplot), [geom_histogram](#histogram), [geom_density](#density), [geom_density_line](#density_line)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(hexbin)
library(viridis)
worldbankdata |>
  filter(Income == "LM") |>
  ggplot(aes(y = Cooking, x=Electricity)) + 
  geom_hex() + 
  scale_fill_viridis()
```



## geom_heat_grid {#heat_grid}

**Package**

ggDoubleHeat [@ggDoubleHeat]

**Description**

Visualize two quantitative variables of information inside a heatmap cell using a grid.

**Understandable aesthetics**

*required aesthetics*

`x`, `y`, `outside`, `inside`

*Optional aesthetics*

`outside_colors`, `outside_name`, `inside_colors`, `inside_name`


**See also**

[geom_heat_circle](#heat_circle), [geom_heat_tri](#heat_tri)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggDoubleHeat)
worldbankdata[254:263, ] |>
  ggplot(aes(y = Year, x=Income)) + 
  geom_heat_grid(outside = Electricity,
           inside = Cooking) 
```


## geom_heat_tri {#heat_tri}

**Package**

ggDoubleHeat [@ggDoubleHeat]

**Description**

Visualize two quantitative variables of information inside a heatmap cell using triangles.

**Understandable aesthetics**

*required aesthetics*

`x`, `y`, `lower`, `upper`

*Optional aesthetics*

`lower_colors`, `lower_name`, `upper_colors`, `upper_name`



**See also**

[geom_heat_grid](#heat_grid), [geom_heat_tri](#heat_tri)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggDoubleHeat)
worldbankdata[254:263, ] |>
  ggplot(aes(y = Year, x=Income)) + 
  geom_heat_tri(lower = Electricity,
           upper = Cooking) 
```

## geom_heat_circle {#heat_circle}

**Package**

ggDoubleHeat [@ggDoubleHeat]

**Description**

Visualize two quantitative variables of information inside a heatmap cell using triangles.

**Understandable aesthetics**

*required aesthetics*

`x`, `y`, `outside`, `inside`

*Optional aesthetics*

`outside_colors`, `outside_name`, `inside_colors`, `inside_name`


**See also**

[geom_heat_grid](#heat_grid), [geom_heat_tri](#heat_tri)

**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
library(ggDoubleHeat)
worldbankdata[254:263, ] |>
  ggplot(aes(y = Year, x=Income)) + 
  geom_heat_circle(outside = Electricity,
           inside = Cooking) 
```

## geom_hline{#hline}

**Package**

ggplot2 [@ggplot2]

**Description**

Draw a horizontal line given intercept.

**Understandable aesthetics**

Unlike most other geoms, `geom_hline` does not depend on the x and y variables that we map for the main plot. 


**See also**

 [geom_point](#point), [geom_vline](#vline), [geom_abline](#hline)

**Example**

```{r, fig.height=8, fig.width=8, warning=FALSE, message=FALSE}
a1 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_hline(yintercept = 50) + 
  labs(title="a1: geom_abline only") +
  theme(aspect.ratio = 1)
a2 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_hline(yintercept = 50) + 
  geom_point() + 
  labs(title = "a2: geom_hline \n and geom_point") +
  theme(aspect.ratio = 1)
a1 | a2
```

