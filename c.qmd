# geom_c  {#sec-c}

```{r, message=FALSE, warning=FALSE,echo=FALSE}
library(tidyverse)
library(drone)
library(patchwork)
library(ggpattern)
data("worldbankdata")
```


## geom_col

**Package**

ggplot2 [@ggplot2]

**Description**

Create bar charts

**Understandable aesthetics**

*Required aesthetics*

`x`, `y`

*Optional aesthetics*

`alpha`, `colour`, `fill`, `group`, `linetype`, `linewidth`


**See also**

[geom_bar](#bar)

**Example**

```{r}
worldbankdata |>
  filter(Year == 2021) |>
  group_by(Income) |>
  summarise(n = n()) |>
  ggplot(aes(x = Income, y = n)) +   geom_col()

```


## geom_col_pattern{#col_pattern}

**Package**

ggpattern [@ggpattern]

**Description**

Fill columns with a pattern. User can map a variable for pattern or set a pattern.

**Understandable aesthetics**

*Required aesthetics*

`x`, `y`

*Optional aesthetics*

`pattern`, `fill`, `colour`


**See also**

[geom_line](#line), [geom_ribbon](#ribbon)

**Example**

```{r, fig.cap="Illustration of geom_col_pattern"}
worldbankdata |>
  filter(Year == 2021) |>
  group_by(Income) |>
  summarise(n = n()) |>
  ggplot(aes(x = Income, y = n)) +  
  ggpattern::geom_col_pattern(aes(pattern = n, pattern_angle=n),
    colour  = 'black', fill="white") 
```

## geom_count{#count}

**Package**

ggplo2t [@ggplot2]

**Description**

Counts the observations at every point on the plot, and then maps the count with the size of the point.

**Understandable aesthetics**

*Required aesthetics*

`x`, `y`


*Optional aesthetics*

`alpha`, `colour`, `fill`, `group`, `shape`, `size`, `stroke`


**See also**

[geom_point](#point)

**Example**

Here, both `geom_point` and `geom_count` are plotted to see the difference.

```{r, warning=FALSE, message=FALSE}
a1 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_point(alpha = 0.5) + 
  labs(title = "a1: geom_point") +
  theme(aspect.ratio = 1)
a2 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_count() + 
  labs(title = "a2: geom_count") +
  theme(aspect.ratio = 1)
a1 | a2
```



## geom_circle{#circle}

**Package**

ggforce [@ggforce]

**Description**

Draw circles based on a center point and a radius.

**Understandable aesthetics**

*required aesthetics*

`x0` - starting coordinate of x-axis , `y0` - starting coordinate of x-axis, `r` - radius

*optional aesthetics*

`color`, `fill`, `linewidth`, `linetype`, `alpha`, `lineend`


**See also**

[geom_mark_circle](#mark_circle)

**Example**

```{r, warning=FALSE, message=FALSE}
worldbankdata |>
  filter(Year == 2021) |>
ggplot(aes(y = Cooking, x=Electricity, col=Income)) + 
  geom_point() + 
  ggforce::geom_circle(aes(x0 = 26, y0 = 5, r = 20),
              inherit.aes = FALSE) + 
  theme(aspect.ratio = 1)
```

## geom_contour {#contour}


**Package**

ggplot2 [@ggplot2]

**Description**

Create contour plots.

**Understandable aesthetics**

*Required aesthetics*

`x`, `y`

*Optional aesthetics*

`alpha`, `colour`, `fill` , `group`, `linetype`, `linewidth`, `subgroup`


**See also**

[geom_contour_filled](#contour_filled), [geom_tile](#tile), [geom_density_2d](#density_2d)
  
**Example**


```{r, warning=FALSE, message=FALSE, fig.height=3, fig.width=3}
mean <- c(0.5, -0.5)
sigma <- matrix(c(1, 0.5, 0.5, 1), nrow=2)
data.grid <- expand.grid(x=seq(-3, 3, length.out=200),
                         y=seq(-3, 3, length.out=200))
df <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid, mean=mean, sigma=sigma))
ggplot(df, aes(x=x, y=y, z=prob)) + 
  geom_contour() + 
  theme(aspect.ratio = 1)
```



## geom_contour_filled {#contour_filled}

**Package**

ggplot2 [@ggplot2]

**Description**

Create contour plots

**Understandable aesthetics**

`x`, `y`, `alpha`, `colour`, `linetype`, `linewidth`, `group`, `weight`


**See also**

[geom_contour](#contour), [geom_tile](#tile), [geom_density_2d](#density_2d)
  
**Example**

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
mean <- c(0.5, -0.5)
sigma <- matrix(c(1, 0.5, 0.5, 1), nrow=2)
data.grid <- expand.grid(x=seq(-3, 3, length.out=200),
                         y=seq(-3, 3, length.out=200))
df <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid, mean=mean, sigma=sigma))
ggplot(df, aes(x=x, y=y, z=prob)) + 
  geom_contour_filled() + 
  theme(aspect.ratio = 1)
```


## geom_curve {#curve}


**Package**

ggplot2 [@ggplot2]

**Description**

`geom_segment()` draws a straight line between between two points. geom_curve draws a curved line.

### Understandable aesthetics

*required aesthetics*

`x`, `y`

*optional aesthetics*


`alpha`, `colour`, `linetype`, `linewidth`, `group`

### The statistical transformation to use on the data for this layer 

`identity`

### See also

[geom_segment](#segment)
  
### Examples


```{r}
df <- data.frame(x1 = 0, x2 = 100, y1 = 0, y2 = 100)
ggplot(df) + 
  geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2))
```

```{r}
df <- data.frame(x2 = c( 3, 4, 4, 3, -3, -4, -4, -3),
                 y2 = c( 4, 3, -3, -4, -4, -3, 3, 3),
                 x1 = rep(0, 8),
                 y1 = rep(0, 8))

ggplot(df) + 
  geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2),
             curvature = 0.75, angle = -45,
             arrow = arrow(length = unit(0.25,"cm"))) + 
  coord_equal() +
  xlim(-5, 5) + ylim(-5, 5)
```

## geom_crossbar {#crossbar}


### Package

ggplot2 [@ggplot2]

### Description

Plot a vertical interval defined by y, ymin and ymax or x, xmin and xmax.

### Understandable aesthetics

**required aesthetics**

`x` or `y`

`xmin` or `ymin`

`xmax` or `ymax`

**optional aesthetics**

`alpha`, `colour`, `linetype`, `linewidth`, `group`


### See also

[geom_segment](#segment)
  
**Examples**

*Example 1*

```{r, warning=FALSE, message=FALSE}
summarydf <- worldbankdata |>
  drop_na() |>
  select(Electricity, Income) |>
  group_by(Income) |>
  reframe(qs = quantile(Electricity, c(0.25, 0.5 ,0.75))) |>
  mutate(q=rep(c("Q1", "Q2", "Q3"), 4)) |>
  pivot_wider(names_from = q,
              values_from = qs)
summarydf
ggplot(summarydf, aes(x=Income, ymin = Q1, y=Q2, ymax = Q3)) + 
  geom_crossbar(size=1,col="red", width = .5)
```

*Example 2*

```{r}
summary_stats <- worldbankdata |>
  drop_na() |>
  select(Electricity, Income) |>
  group_by(Income) |>
  reframe(mean = mean(Electricity),
          sd = sd(Electricity)) 
ggplot(summary_stats, aes(x = Income, y = mean, ymin = mean - sd, ymax = mean + sd)) +
  geom_crossbar(width = 0.5, fatten = 2) 
```
