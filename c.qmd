# geom_c  {#sec-c}

```{r, message=FALSE, warning=FALSE,echo=FALSE}
library(tidyverse)
library(drone)
library(patchwork)
library(ggpattern)
data("worldbankdata")
```


## geom_col

### Package

ggplot2 [@ggplot2]

### Description

Create bar charts

### Understandable aesthetics

### The statistical transformation to use on the data for this layer

Before using `geom_col`, you need to create a summary table of counts/proportions or you can apply `geom_col` for a summary table.

`after_stat(count)`

`after_stat(prop)`

### See also

[geom_bar](#bar)

### Example

```{r}
worldbankdata |>
  filter(Year == 2021) |>
  group_by(Income) |>
  summarise(n = n()) |>
  ggplot(aes(x = Income, y = n)) +   geom_col()

```


## geom_col_pattern{#col_pattern}

### Package

ggpattern [@ggpattern]

### Description

Fill columns with a pattern. User can map a variable for pattern or set a pattern.

### Understandable aesthetics

`x`, `y`, `pattern`, `fill`, `colour`

### The statistical transformation to use on the data for this layer

None


### See also

[geom_line](#line), [geom_ribbon](#ribbon)

```{r, fig.cap="Illustration of geom_col_pattern"}
worldbankdata |>
  filter(Year == 2021) |>
  group_by(Income) |>
  summarise(n = n()) |>
  ggplot(aes(x = Income, y = n)) +   ggpattern::geom_col_pattern( pattern = 'stripe',
    fill    = 'white',
    colour  = 'black')
```

## geom_count{#count}

### Package

ggplo2t [@ggplot2]

### Description

Counts the observations at every point on the plot, and then maps the count with the size of the point.

### Understandable aesthetics

`x`, `y`, `pattern`, `fill`, `colour`

### The statistical transformation to use on the data for this layer

None


### See also

[geom_point](#point)

### Example

Here, both `geom_point` and `geom_count` are plotted to see the difference.

```{r, warning=FALSE, message=FALSE}
a1 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_point(alpha = 0.5) + 
  labs(title = "a1: geom_point") +
  theme(aspect.ratio = 1)
a2 <- ggplot(worldbankdata, aes(y = Cooking, x=Electricity)) + 
  geom_count() + 
  labs(title = "a2: geom_count") +
  theme(aspect.ratio = 1)
a1 | a2
```



## geom_circle{#circle}

### Package

ggforce [@ggforce]

### Description

### Understandable aesthetics


**required aesthetics**

`x0` - starting coordinate of x-axis , `y0` - starting coordinate of x-axis, `r` - radius

**optional aesthetics**

`color`, `fill`, `linewidth`, `linetype`, `alpha`, `lineend`

### The statistical transformation to use on the data for this layer 

`stat_align`

### See also

[geom_mark_circle](#mark_circle), 
### Example

```{r, warning=FALSE, message=FALSE}
worldbankdata |>
  filter(Year == 2021) |>
ggplot(aes(y = Cooking, x=Electricity, col=Income)) + 
  geom_point() + 
  ggforce::geom_circle(aes(x0 = 26, y0 = 5, r = 20),
              inherit.aes = FALSE) + 
  theme(aspect.ratio = 1)
```

## geom_contour {#contour}


### Package

ggplot2 [@ggplot2]

### Description

Create contour plots

### Understandable aesthetics

`x`, `y`, `alpha`, `colour`, `linetype`, `linewidth`, `group`, `weight`

### The statistical transformation to use on the data for this layer 

`stat_contour`

### See also

[geom_contour_filled](#contour_filled), [geom_tile](#tile), [geom_density_2d](#density_2d)
  
### Example



## geom_contour_filled {#contour_filled}


### Package

ggplot2 [@ggplot2]

### Description

Create contour plots

### Understandable aesthetics

`x`, `y`, `alpha`, `colour`, `linetype`, `linewidth`, `group`, `weight`

### The statistical transformation to use on the data for this layer 

`stat_contour`

### See also

[geom_contour](#contour), [geom_tile](#tile), [geom_density_2d](#density_2d)
  
### Example


## geom_curve {#curve}


### Package

ggplot2 [@ggplot2]

### Description

`geom_segment()` draws a straight line between between two points. geom_curve draws a curved line.

### Understandable aesthetics

**required aesthetics**

`x`, `y`

**optional aesthetics**


`alpha`, `colour`, `linetype`, `linewidth`, `group`

### The statistical transformation to use on the data for this layer 

`identity`

### See also

[geom_segment](#segment)
  
### Examples


```{r}
df <- data.frame(x1 = 0, x2 = 100, y1 = 0, y2 = 100)
ggplot(df) + 
  geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2))
```

```{r}
df <- data.frame(x2 = c( 3, 4, 4, 3, -3, -4, -4, -3),
                 y2 = c( 4, 3, -3, -4, -4, -3, 3, 3),
                 x1 = rep(0, 8),
                 y1 = rep(0, 8))

ggplot(df) + 
  geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2),
             curvature = 0.75, angle = -45,
             arrow = arrow(length = unit(0.25,"cm"))) + 
  coord_equal() +
  xlim(-5, 5) + ylim(-5, 5)
```

## geom_crossbar {#crossbar}


### Package

ggplot2 [@ggplot2]

### Description

Plot a vertical interval defined by x, ymin and ymax.

### Understandable aesthetics

**required aesthetics**

`x` or `y`

`xmin` or `ymin`

`xmax` or `ymax`

**optional aesthetics**


`alpha`, `colour`, `linetype`, `linewidth`, `group`

### The statistical transformation to use on the data for this layer 

`identity`

### See also

[geom_segment](#segment)
  
### Examples

```{r, warning=FALSE, message=FALSE}
summary.wb <- aggregate(. ~ Income, mean, data=worldbankdata)
ggplot(worldbankdata, aes(x = Income, y = Electricity)) + 
  geom_point() + 
  geom_crossbar(data=summary.wb, aes(ymin = Electricity, ymax = Electricity),
                  size=1,col="red", width = .5)
```

