# Preface {.unnumbered}

## What can I find in this <span style='color:red;'>geom encyclopedia</span>?

Before answering this question let me briefly explain what is data visualisation? Data visualization is the graphical representation of data to understand the patterns, trends, relationships, outliers and complex structures hidden inside data more easily.

Now let's look at what is **geom**?

In data visualization, geometries (or geoms) refer to the visual elements that represent data in a plot. They define the type of chart or shape used to depict data points or relationships. 

To illustrate the idea I use the following dataset which contains information related to 82 countires. The variable description is as follows:

```{r}
#| echo: false
library(knitr)
library(kableExtra)
Variable <- c("Country", "Income", "Electricity")
description <- c("Country name", "Income category in 2021: lower income (L), lower middle income (LM)", "Percentage of people access to electricity")
df <- data.frame(Variable, Description = description)
df |> kbl() |>
  kable_paper("hover", full_width = F)
```

The first eight rows of the dataset as well as the R code to load the dataset is given below:

```{r,  warning=FALSE, message=FALSE}
library(drone)
library(tidyverse)
data("worldbankdata")
worldbankdata2021 <- worldbankdata |> filter(Year == 2021) |>
  filter( Income == "LM" | Income =="L") |> 
  select( Country, Income, Electricity)
worldbankdata2021 |> head(8)
```


Now, I want to visualize the relationship between Electricity and Income variables on the cartesian coordinate plane shown in Figure \@ref(fig:cartesian)

```{r, fig.height=3, fig.width=3,echo=FALSE}
#| fig.cap: "Figure 1: Cartesian Coordinate Plane. Income level is mapped to x-axis and Electricity is mapped to y-axis."
#| fig.label: "fig:cartesian"
p0 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity))
p0
```

Figure 2 shows 6 plotting types that I created using the same dataset and same cartesian plane. 

```{r, warning=FALSE, message=FALSE, fig.width=8, fig.height=15, echo=FALSE}
#| fig.cap: "Figure 2: Relationship between income level and percentage of people access to electricity in lower incom (L), lower middle income (LM) in 2021"
#| fig.label: "fig:geom"
library(patchwork)
library(tidyverse)
library(ggbeeswarm)
library(ggplot2)
library(drone)
data("worldbankdata")
worldbankdata2021 <- worldbankdata |> filter(Year == 2021 & Income == "LM" | Income =="L")

p1 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_point() + ggtitle("A: geom_point")
p2 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_quasirandom() + ggtitle("B: geom_quasirandom")
p3 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_jitter() + ggtitle("C: geom_jitter")
p4 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_boxplot() + ggtitle("D: geom_boxplot")
p5 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_jitter() + geom_boxplot(alpha=0.5, outlier.shape = NA) + ggtitle("E: geom_jitter and geom_boxplot")
p6 <- ggplot(worldbankdata2021, aes(x=Income, y=Electricity)) + geom_violin(width = 1, fill="white", trim=TRUE)+ ggtitle("F: geom_violin")

lrdf <- worldbankdata2021 |> select(Electricity, Income) |> group_by(Income) |>
  summarize(Min = min(Electricity, na.rm = TRUE), Max = max(Electricity, na.rm=TRUE), Mean = mean(Electricity, na.rm = TRUE))
p7 <- ggplot(lrdf) + 
   geom_linerange(aes(x=Income, ymin=Min, ymax=Max, ymean = Mean), width=0.2, size=1, color="blue") + ggtitle("G: geom_linerange") + ylab("Electricity")
p8 <- ggplot(lrdf) + 
   geom_linerange(aes(x=Income, ymin=Min, ymax=Max),  width=0.2, size=1, color="blue") + 
  geom_point( aes(x=Income, y=Mean), col="white", size=4, shape=21, fill="red") + ggtitle("H: geom_linerage and geom_point") + ylab("Electricity")

(p1 | p2) / ( p3 | p4) / (p5 | p6 ) / (p7 | p8)
```

Even though, I used the same data set and same Cartesian coordinate plane the appearance of the plots are drastically different.

Could you list the differences you observe in the charts?

1. The type of chart or shape used to depict data. In data visualization grammar of graphics framework, this is reffered to as **gemetries (or geoms)**, the visual elements that represent data on a plot.  In the [ggplot2](@ggplot2) package, this is reffered to as **geom layer**.

2. The statistics that we compute on the data to visualise on the chart. In the [ggplot2](@ggplot2) this is referred to as **stat layer**.

Here is a  summary of geom and stat layers used in the charts shown in Figure \@ref(fig:geom).


```{r}
#| echo: false
plot.name <- c("A", "B", "C", "D", "E", "F", "G", "H")
geom <- c("point",
          "quasirandom",
          "jitter",
          "boxplot",
          "jitter and boxplot",
          "violin",
          "linerange",
          "linerange and point")
stat <- c("data is plotted as-is", 
          "data is plotted as-is. But, generate quasirandom placement of points, helpful for avoiding overplotting",
          "data is plotted as-is. But, adds a small amount of random noise to the position of points to reduce overlap and make individual points more visible",
          "Five statistical summary measures used in the boxplot",
          "Individual points and summary measures corresponds to boxplot",
          " calculate and plot the kernel density estimation (KDE) for continuous data",
          "Range of data",
          "Range and mean of data")
df2 <- data.frame(plot.name, geom, stat)
df2 |>    kbl(col.names = c("Plot", "geom layer", "stat layer")) |> 
  kable_paper("hover", full_width = F)
  
```


This encylopedia is a collection of geoms, in other words plot types that you can create using the ggplot2 or extensions of ggplot2 framework. In other words <span style='color:red;'>Encyclopedia of Plots</span>.

## Motivation to write this book

There is no centralized location to find all types of geoms are easily accessible. 

## What you will learn?


Each geom has a set of aesthetics that it understands. These aesthetics can be divided into two parts: i) required aesthetics and ii) optional aesthetics. Further, Every geom has a default stat; and every stat has a default geom.

To get an idea about the associated aesthetics and stat let look at plot shown in Figure 4. In this case `x`, `y` are required aesthetics and `color` `size` and `alpha` is optional aesthetics. The statistics layer is identity since the data points are plotted as it is. 

The aesthetic mappings, defined with `aes()`, describe how variables in the dataset are mapped to visual properties or aesthetics. This `aes(x=Income, y=Electricity, color=Income)` is called mapping variables to the visual properties of the chart. This `alpha=0.5, size=2` is called setting values to visual properties. 

```{r, warning=FALSE, message=FALSE}
#| fig.cap: "Figure 4: Distribution of Electricity by Income Category "
#| fig.label: "fig:example"
ggplot(worldbankdata2021, aes(x=Income, y=Electricity, color=Income)) + 
  geom_point(alpha=0.5, size=2) +
  scale_color_brewer(palette = "Dark2")
```

In this <span style='color:red;'>geom encyclopedia</span>, you will learn about the required and optional aesthetics that each geom supports, as well as the associated statistical layer for each geom. Additionally, an example is provided demonstrating the application of each geom with reproducible R code.

## What you won't learn?

This book is not focused on teaching R programming fundamentals or providing a comprehensive guide to data visualization principles. It assumes you already have a basic understanding of R and ggplot2, and it will not cover how to start from scratch in these areas.

## How this <span style='color:red;'>geom encyclopedia</span> is organized?

As this is an encyclopedia, the chapters are organised according to the alphabetical order. However, within a 

## Audience

The Figure 3 shows my target audience for the book. In general for all data enthusiasts, this can be considered as a <span style='color:green;'>Encyclopedia of Plots</span>. For R, tidyverse, gggplot2 users this can be considered as a <span style='color:red;'>Data Visualisation Geometries Encyclopedia</span>.

```{r, echo=FALSE, fig.align="center"}
#| fig.cap: "Figure 4: Audience"
#| fig.label: "fig:audience"
knitr::include_graphics("audience.png")
```

## What prior knowledge is needed to use this <span style='color:red;'>geom encyclopedia</span>?

**For a complete newcomer to get an idea about the possible charts that can be drawn for a data set.**

 None


**To get hands-on-experience with the examples provided you need to have following knowledge.**

1. R and RStudio  Integrated Development Environment (IDE)

2. Basics of R programming

3. [tidyverse](https://www.tidyverse.org/) [@tidyverse] style of coding

4. Data wrangling with tidyr[@tidyr] and dplyr[@dplyr]

5. Knowledge in using the pipe operator:  **|>**

6. Knowledge in creating data visualisations using the grammar of graphics frame work implemented in ggplot2[@ggplot2]

If you want to learn more of them, following are the books recommended:

- [R for Data Science (2e)](https://r4ds.hadley.nz/) written by Hadley Wickham, Mine Ã‡etinkaya-Rundel, and Garrett Grolemund.

- [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)  written by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.

## Acknowledgments

I would like to thank all the package authors and contributors who have developed and shared geoms as R packages.

I would like to thank all the students who took my ASP 460 2.0/STA 492 2.0 Data Visualization course in 2024 for their valuable contributions in exploring geoms with me.

This book was built with <a href="https://quarto.org/">Quarto</a>. 

## Cite

Please use the below text and bibtex for citing the book.


Please use the below text and bibtex for citing the associated R package drone.

`Talagala T (2025).
  drone: Data for Data
  Visualisation Geometries
  Encyclopedia. R package
  version 1.0.0, commit
  86d4fc19bb3a03da3eeb8f6748cb0bfc21dfdf72,
  <https://github.com/thiyangt/drone>.`


`@Manual{drone,
    title = {drone: Data for Data Visualisation Geometries Encyclopedia},
    author = {Thiyanga S. Talagala},
    year = {2025},
    note = {R package version 1.0.0, commit 86d4fc19bb3a03da3eeb8f6748cb0bfc21dfdf72},
    url = {https://github.com/thiyangt/drone},
  }`

## Colophon

The field of data visualization is dynamic, and new techniques and visualizations may emerge over time. Hence, I will be regularly updating this encyclopedia to ensure it remains a relevant and comprehensive resource for users.